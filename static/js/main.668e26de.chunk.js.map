{"version":3,"sources":["services/Utils.js","services/api.services.js","shared/components/Input/Input.js","shared/components/Image/Image.js","shared/components/Button/Button.js","shared/components/Spinner/Spinner.js","components/Register/Register.js","components/Login/Login.js","App.js","serviceWorker.js","index.js","assets/app_icon.png"],"names":["Utils","value","RegExp","test","passwordObj","instance","axios","create","baseURL","Input","props","inputElement","elementType","TextField","margin","variant","className","elementConfig","id","label","name","onChange","changeEvent","helperText","error","multiline","FormControl","InputLabel","Select","labelId","MenuItem","options","map","option","key","displayValue","Button","color","width","Image","console","log","Avatar","alt","src","CustomButton","disabled","text","Spinner","CircularProgress","React","Component","validEmailRegex","regixPasswordPattern","Login","handleValidation","state","form","email","password","setState","Object","keys","length","submitForm","event","preventDefault","info","changefield","ev","target","Logo","onSubmit","this","type","placeholder","href","data-toggle","data-placement","title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.668e26de.chunk.js","sourcesContent":[" export default class Utils {\r\n    \r\n    static validateEmail(value) {\r\n        //eslint-disable-next-line\r\n        const emailRegex = RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\r\n\r\n        return emailRegex.test(value)\r\n    }\r\n\r\n    static validatePassword(value) {\r\n        const passwordObj = {\r\n            minUppercaseCharCount: 1,\r\n            minLowercaseCharCount: 1,\r\n            minDigitsCount: 1,\r\n            minSpecCharCount: 1,\r\n            minLength: 6\r\n        };\r\n        const passwordPattern= RegExp(`^(?=.*?[A-Z]{${passwordObj.minUppercaseCharCount}})(?=.*?[a-z]{${passwordObj.minLowercaseCharCount}})(?=.*?[0-9]{${passwordObj.minDigitsCount}})(?=.*?[#?!@$%^&*-]{${passwordObj.minSpecCharCount}}).{${passwordObj.minLength},}$`)\r\n        return passwordPattern.test(value)\r\n    }\r\n\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api-chatapp-node.herokuapp.com/'\r\n});\r\n\r\n\r\nexport default instance","import React from 'react';\r\nimport './Input.scss';\r\n\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null\r\n    switch ( props.elementType ) {\r\n        case 'input':\r\n            inputElement=<TextField\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            className=\"font-size-14px fullWidth rounded-0\"\r\n                            {...props.elementConfig}\r\n                            id={props.id}\r\n                            label={props.id}\r\n                            name={props.id}\r\n                            value={props.value}\r\n                            onChange={props.changeEvent} \r\n                            helperText={props.error}/>\r\n            break;\r\n        case 'textarea':\r\n             inputElement=<TextField\r\n                            multiline\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            className=\"font-size-14px fullWidth rounded-0\"\r\n                            {...props.elementConfig}\r\n                            id={props.id}\r\n                            label={props.id}\r\n                            name={props.id}\r\n                            value={props.value}\r\n                            onChange={props.changeEvent} \r\n                            helperText={props.error}/>\r\n            break;\r\n        case 'select':\r\n            inputElement=\r\n            <FormControl variant=\"outlined\" className=\"fullWidth MuiFormControl-marginNormal font-size-14px fullWidth rounded-0\" >\r\n                <InputLabel id=\"demo-simple-select-error-label\">{props.id}</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-outlined-label\"\r\n                    id={props.id}\r\n                    value={props.value}\r\n                    onChange={props.changeEvent}>\r\n                    <MenuItem value=\"\"><em>None</em></MenuItem>\r\n                        {props.elementConfig.options.map(option=>(\r\n                        <MenuItem key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>    \r\n            break;\r\n        case 'button':\r\n            inputElement=<Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\"btnLogin font-size-14px\"\r\n                            width={1}\r\n                            {...props.elementConfig}> {props.id}\r\n                            </Button>\r\n            break;    \r\n        default:\r\n            break;\r\n    }\r\n\r\n\r\n    return (\r\n         inputElement\r\n    )\r\n}\r\nexport default Input","import React from 'react';\r\nimport './Image.scss';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n\r\nconst Image = (props) => {\r\n    console.log(props)\r\n    return(\r\n        <Avatar variant={props.variant} alt=\"Remy Sharp\" src={props.src} />\r\n\r\n    )\r\n    \r\n}\r\nexport default Image","import React from 'react';\r\nimport './Button.scss';\r\nimport Button from '@material-ui/core/Button'\r\n\r\nconst CustomButton = (props) => {\r\n    console.log(props)\r\n    return(\r\n       <Button\r\n            className=\"btnLogin font-size-14px\"\r\n            width={1}\r\n            disabled={props.disabled}\r\n            {...props.elementConfig}> {props.text}\r\n        </Button>\r\n\r\n    )\r\n}\r\n    \r\nexport default CustomButton","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = (props) => (\r\n    <div className=\"text-center\"> \r\n        <CircularProgress /> \r\n        <p className=\"loading\">Loading...</p>\r\n    </div>\r\n\r\n);\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './Register.scss';\r\nimport formData from './registrationForm.json'\r\nimport Logo from '../../assets/app_icon.png';\r\nimport Utils from '../../services/Utils';\r\nimport axios from '../../services/api.services';\r\n\r\nimport Input from '../../shared/components/Input/Input';\r\nimport Image from '../../shared/components/Image/Image';\r\nimport CustomButton from '../../shared/components/Button/Button';\r\nimport Spinner from '../../shared/components/Spinner/Spinner';\r\n\r\n\r\nexport default class Register extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        console.log(formData)\r\n        this.state = formData\r\n    }\r\n    submitForm = event => {\r\n        event.preventDefault()\r\n\r\n        this.setState({ loading:true });\r\n        const formData={}\r\n        for (let key in this.state.InputElements) {\r\n            formData[key.toLowerCase()] = this.state.InputElements[key].value;\r\n        }\r\n        console.log(formData);\r\n\r\n        axios.post('register', formData ).then( response => {\r\n                console.log(response);\r\n                localStorage.setItem('user',JSON.stringify(response.data.result)) \r\n                this.setState({ loading: false });\r\n            }).catch( error => {\r\n                console.log(error);\r\n                this.setState({ loading: false });\r\n            } );\r\n       \r\n    }\r\n\r\n    checkValidity=(type, value, rule)=>{\r\n        let isfieldValid=true\r\n        if(rule){\r\n            if(isfieldValid && rule.required){\r\n                isfieldValid = value.trim() !== '' \r\n            }\r\n            if(isfieldValid && rule.maxLength){\r\n                isfieldValid =  value.trim().length <= rule.maxLength\r\n            }\r\n            if(isfieldValid && rule.minLength){\r\n                isfieldValid = isfieldValid && value.trim().length >= rule.minLength\r\n            }\r\n            if(isfieldValid && type === 'email'){\r\n                isfieldValid =  Utils.validateEmail(value)\r\n            }\r\n            if(isfieldValid && type === 'password'){\r\n                isfieldValid =  Utils.validatePassword(value)\r\n            }\r\n        }\r\n        return isfieldValid\r\n    }\r\n\r\n    onChange=(event, field)=>{\r\n        const InputElements = {\r\n            ...this.state.InputElements\r\n        };\r\n        const updatedFormElement = { \r\n            ...InputElements[field]\r\n        };\r\n        updatedFormElement.value = event.target.value\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.elementConfig.type, updatedFormElement.value, updatedFormElement.validation);\r\n\r\n        InputElements[field] = updatedFormElement;\r\n\r\n        let formIsValid = true\r\n        for (const inputName in InputElements){\r\n            formIsValid= formIsValid && InputElements[inputName].valid\r\n        }\r\n\r\n        this.setState({ InputElements, formIsValid });\r\n    }\r\n\r\n    render() {\r\n        const formArray = [];\r\n        for (const key in this.state.InputElements) {\r\n            formArray.push({\r\n                id: key, \r\n                config: this.state.InputElements[key]\r\n            });\r\n        }\r\n        console.log(this.state)\r\n\r\n        let form = (\r\n            <div>\r\n                <h5 className=\"py-2\">Register</h5>\r\n                <Image src={Logo} variant=\"rounded\"/>\r\n                <form onSubmit={this.submitForm}>\r\n                    {formArray.map(formElement => (\r\n                        <Input\r\n                            key={formElement.id}\r\n                            id={formElement.id}\r\n                            elementType={formElement.config.elementType} \r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value={formElement.config.value}\r\n                            className={formElement.className}\r\n                            changeEvent={event=>this.onChange(event, formElement.id)}\r\n                        />\r\n                    ))}\r\n                <CustomButton key={this.state.Button.text}\r\n                        id={this.state.Button.text}\r\n                        elementType={this.state.Button.elementType} \r\n                        elementConfig={this.state.Button.elementConfig}\r\n                        text={this.state.Button.text}\r\n                        className={this.state.Button.className}\r\n                        disabled={!this.state.formIsValid}\r\n                        />\r\n                </form>\r\n            </div>\r\n            )\r\n        if ( this.state.loading ) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"Login\">\r\n                    <div className=\"col-md-6 col-md-offset-3 col-sm-6 col-sm-offset-3 col-xs-12 background-white p-4\">\r\n                        {form}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './Login.scss';\r\nimport Logo from '../../assets/app_icon.png';\r\nimport Image from '../../shared/components/Image/Image';\r\n\r\nimport formData from './loginForm.json'\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nconst passwordObj = {\r\n    minUppercaseCharCount: 1,\r\n    minLowercaseCharCount: 1,\r\n    minDigitsCount: 1,\r\n    minSpecCharCount: 1,\r\n    minLength: 6\r\n};\r\nconst validEmailRegex = RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\r\nconst regixPasswordPattern = RegExp(`^(?=.*?[A-Z]{${passwordObj.minUppercaseCharCount}})(?=.*?[a-z]{${passwordObj.minLowercaseCharCount}})(?=.*?[0-9]{${passwordObj.minDigitsCount}})(?=.*?[#?!@$%^&*-]{${passwordObj.minSpecCharCount}}).{${passwordObj.minLength},}$`)\r\n\r\nexport default class Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            form: { email: '', password: '' },\r\n            error: {}\r\n        }\r\n\r\n    }\r\n\r\n    handleValidation = () => {\r\n        let error = this.state.error\r\n        if (!this.state.form.email) {\r\n            error['email'] = \"Email Required\"\r\n        } else if (!this.state.form.password) {\r\n            error['password'] = \"Password Required\"\r\n        } else if (this.state.form.email && !validEmailRegex.test(this.state.form.email)) {\r\n            error['email'] = \"Invalid Email\"\r\n        } else if (this.state.form.password && !regixPasswordPattern.test(this.state.form.password)) {\r\n            error['password'] = \"Invalid Password pattern\"\r\n        } else {\r\n            error = {}\r\n        }\r\n        this.setState({ error })\r\n        return Object.keys(error).length ? false : true\r\n    }\r\n\r\n    submitForm = event => {\r\n        event.preventDefault();\r\n        if (this.handleValidation()) {\r\n            console.info('Valid Form')\r\n        } else\r\n            console.info('InValid Form')\r\n        console.log(this.state)\r\n    }\r\n\r\n    changefield = (ev) => {\r\n        let form = this.state.form\r\n        form[ev.target.name] = ev.target.value\r\n        this.setState({ form });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"Login\">\r\n                    <div className=\"col-md-4 col-md-offset-4 col-sm-6 col-sm-offset-3 col-xs-12 maxWidth p-4\">\r\n                        <Image src={Logo} />\r\n                        <h5 className=\"py-2\">Sign In</h5>\r\n                        <form className=\"needs-validation\" onSubmit={this.submitForm}>\r\n                            <div>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                    className=\"font-size-14px fullWidth rounded-0\"\r\n                                    type=\"email\"\r\n                                    name='email'\r\n                                    placeholder=\"Email\"\r\n                                    onChange={this.changefield} />\r\n                            </div>\r\n                            <div>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                    className=\"font-size-14px fullWidth rounded-0\"\r\n                                    type=\"password\"\r\n                                    name='password'\r\n                                    placeholder=\"Password\"\r\n                                    onChange={this.changefield} />\r\n                            </div>\r\n                            <div className=\"text-right\">\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className=\"btnLogin font-size-14px\"\r\n                                    width={1}\r\n                                    type=\"submit\">Sign in</Button>\r\n                            </div>\r\n                        </form>\r\n                        <div className=\"font-size-14px\">\r\n                            <a href=\"/forgot\" >Forgot password?</a>\r\n                        </div>\r\n                        <div className=\"py-2 font-size-14px\">\r\n                            <a href=\"/new\" >New User?</a>\r\n                        </div>\r\n                        <div className=\"py-2 font-size-14px\">\r\n                            <a href=\"/fb\" className=\"fb text-white mr-1 p-2 pointer\" data-toggle=\"tooltip\" data-placement=\"top\"\r\n                                title=\"Facebook login\" > <i className=\"fa fa-facebook fa-fw font-size-18px\"></i>\r\n                            </a>\r\n\r\n                            <a href=\"/google\" className=\"google text-white p-2 pointer\" data-toggle=\"tooltip\"\r\n                                data-placement=\"top\" title=\"Google Login\" id=\"googleBtn\">\r\n                                <i className=\"fa fa-google fa-fw font-size-18px\">\r\n                                </i>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            </div >\r\n        )\r\n    };\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport Register from \"./components/Register/Register\";\r\nimport Login from \"./components/Login/Login\";\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Login />\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/app_icon.a23399fb.png\";"],"sourceRoot":""}